{"ast":null,"code":"const stateDefaults = {\n  danhsachGheDangDat: []\n};\nexport const btDatVe = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : stateDefaults;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'DAT_GHE':\n      {\n        let danhsachGheUpdate = [...state.danhsachGheDangDat];\n        let index = danhsachGheUpdate.findIndex(gheDangDat => gheDangDat.soGhe === ac);\n      }\n\n    default:\n      return { ...state\n      };\n  }\n};","map":{"version":3,"names":["stateDefaults","danhsachGheDangDat","btDatVe","state","action","type","danhsachGheUpdate","index","findIndex","gheDangDat","soGhe","ac"],"sources":["/Users/tranthihan/Documents/BT_CYBERSOFT/btdatve/datve/src/store/reducers/btDatVe.js"],"sourcesContent":["const stateDefaults = {\n   danhsachGheDangDat:[\n \n   ]\n\n\n}\nexport const btDatVe = (state= stateDefaults, action) => {\n   switch (action.type) {\n      case 'DAT_GHE':{\n         let danhsachGheUpdate = [...state.danhsachGheDangDat];\n         let index = danhsachGheUpdate.findIndex(gheDangDat => gheDangDat.soGhe ===ac)\n      }\n      default:\n          return {...state}\n   }\n}\n"],"mappings":"AAAA,MAAMA,aAAa,GAAG;EACnBC,kBAAkB,EAAC;AADA,CAAtB;AAOA,OAAO,MAAMC,OAAO,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAA1BH,aAA0B;EAAA,IAAXI,MAAW;;EACtD,QAAQA,MAAM,CAACC,IAAf;IACG,KAAK,SAAL;MAAe;QACZ,IAAIC,iBAAiB,GAAG,CAAC,GAAGH,KAAK,CAACF,kBAAV,CAAxB;QACA,IAAIM,KAAK,GAAGD,iBAAiB,CAACE,SAAlB,CAA4BC,UAAU,IAAIA,UAAU,CAACC,KAAX,KAAoBC,EAA9D,CAAZ;MACF;;IACD;MACI,OAAO,EAAC,GAAGR;MAAJ,CAAP;EANP;AAQF,CATM"},"metadata":{},"sourceType":"module"}